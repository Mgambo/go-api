basePath: /api/v1
definitions:
  dto_pokemon.PokemonDataResponse:
    properties:
      data:
        $ref: '#/definitions/dto_pokemon.PokemonResponse'
    type: object
  dto_pokemon.PokemonResponse:
    properties:
      count:
        type: integer
      next:
        type: string
      previous:
        type: string
      results:
        items:
          $ref: '#/definitions/models.Pokemon'
        type: array
    type: object
  dto_user.CreateUserRequest:
    properties:
      date_of_birth:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto_user.UserResponse:
    properties:
      date_of_birth:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
    type: object
  models.Pokemon:
    properties:
      name:
        type: string
      url:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: A RESTful API using Gin framework
  title: Go API
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Perform health check
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "ok"}'
          schema:
            additionalProperties: true
            type: object
      summary: Health Check
      tags:
      - Health
  /pokemon:
    get:
      consumes:
      - application/json
      description: Get all the pokemon with limit 100
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto_pokemon.PokemonDataResponse'
      summary: Get all the pokemon
      tags:
      - Pokemon
  /users:
    get:
      consumes:
      - application/json
      description: Perform get users
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "ok"}'
          schema:
            additionalProperties: true
            type: object
      summary: Get Users
      tags:
      - Users
    post:
      description: Perform create user
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto_user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto_user.UserResponse'
      summary: Create User
      tags:
      - Users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Return user whose id is found
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto_user.UserResponse'
      summary: Get Single User by id
      tags:
      - Users
schemes:
- http
swagger: "2.0"
